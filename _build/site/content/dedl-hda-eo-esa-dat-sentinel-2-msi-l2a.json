{"version":2,"kind":"Notebook","sha256":"25ff09c987e7fcbabb2e43485942e90e12cc7edce9f57f4b30a65780fc5205df","slug":"dedl-hda-eo-esa-dat-sentinel-2-msi-l2a","location":"/HDA/Fresh_Data_Pool/DEDL-HDA-EO.ESA.DAT.SENTINEL-2.MSI.L2A.ipynb","dependencies":[],"frontmatter":{"title":"Example of how to use HDA to find and download data for conducting monitoring of Śniadrwy lake","content_includes_title":true,"kernelspec":{"name":"python_dedl","display_name":"Python DEDL","language":"python"},"numbering":{"title":{"offset":2}},"thumbnail":"/b27bd30f978ddf0848f3ea0942070886.jpeg","exports":[{"format":"ipynb","filename":"DEDL-HDA-EO.ESA.DAT.SENTINEL-2.MSI.L2A.ipynb","url":"/DEDL-HDA-EO.ESA.DAT.-cfdbeeb1a89907f4a1696c0b43eb8560.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-content","data":{"tags":[]},"children":[{"type":"image","url":"/b27bd30f978ddf0848f3ea0942070886.jpeg","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"hU5ZWH8Azy","urlSource":"https://github.com/destination-earth/DestinE-DataLake-Lab/blob/main/img/DestinE-banner.jpg?raw=true"}],"visibility":"show","key":"qXApccwVaf"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"strong","children":[{"type":"text","value":"Author:","key":"rtEpEWmCQR"}],"key":"H6dd3WifLn"},{"type":"text","value":" EUMETSAT","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"ervvhH7iwe"},{"type":"break","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"PrZYxFeS61"},{"type":"strong","children":[{"type":"text","value":"Copyright:","key":"jFJxIgrzlv"}],"key":"RF45dlBx7K"},{"type":"text","value":" 2024 EUMETSAT","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"HZFlB3QaJO"},{"type":"break","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Agy0FCFRv5"},{"type":"strong","children":[{"type":"text","value":"Licence:","key":"X6fYEM4cwZ"}],"key":"V1GvxIg0No"},{"type":"text","value":" MIT","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"zOL5AgR6Ze"}],"key":"tPduzboHgG"}],"key":"VB7ph28DZN"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":1,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Example of how to use HDA to find and download data for conducting monitoring of Śniadrwy lake","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"TdeiVbhH8Y"}],"identifier":"example-of-how-to-use-hda-to-find-and-download-data-for-conducting-monitoring-of-niadrwy-lake","label":"Example of how to use HDA to find and download data for conducting monitoring of Śniadrwy lake","html_id":"example-of-how-to-use-hda-to-find-and-download-data-for-conducting-monitoring-of-niadrwy-lake","implicit":true,"key":"w4SDg4N9oe"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"In this notebook, we will present a simple example on how you can access data from DEDL using HDA and what you can do with it. As an example, we will try to download Sentinel-2 images containining data of Śniadrwy lake from first week of July 2023. With usage of HDA and few Python packages, you will be able to obtain rasters with NDWI index.","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"xElA8Xodh5"}],"key":"Pkk6QrBZ9U"}],"key":"HLDSVFLUYG"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":1,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"1. Prerequisites","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"rabmzcNqHQ"}],"identifier":"id-1-prerequisites","label":"1. Prerequisites","html_id":"id-1-prerequisites","implicit":true,"key":"DGuoY5HkT4"}],"key":"bhukuQdfY2"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"1.1 DestinE account","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"ZtlHMlUTD6"}],"identifier":"id-1-1-destine-account","label":"1.1 DestinE account","html_id":"id-1-1-destine-account","implicit":true,"key":"W1AoZnqjWT"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Firstly, to work with HDA we will need account on DestinE Core Service Platfrom website. You can register under this url: ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"YMmLXTF63i"},{"type":"link","url":"https://platform.destine.eu/","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"https://​platform​.destine​.eu/","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"jth6OiWFHl"}],"urlSource":"https://platform.destine.eu/","key":"Gu85v5ZEBT"}],"key":"KkNB4PtukY"}],"key":"KWkQIV44xP"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"1.2 Python’s packages","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"HTuzJsDZHF"}],"identifier":"id-1-2-pythons-packages","label":"1.2 Python’s packages","html_id":"id-1-2-pythons-packages","implicit":true,"key":"fnhgkrZUzg"}],"key":"URGm8nEvMJ"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"import requests\nimport zipfile\nimport io\nimport destinelab as deauth\nfrom getpass import getpass","key":"HDS1ULLtN5"},{"type":"output","id":"s8_az600x_a8fk8u_EBLi","data":[],"key":"VqR0AfCayS"}],"key":"pHt3dGndRV"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"1.3 Prerequiared data","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"cMcM291lIX"}],"identifier":"id-1-3-prerequiared-data","label":"1.3 Prerequiared data","html_id":"id-1-3-prerequiared-data","implicit":true,"key":"C0hyr8Adk5"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Before reuqesting some data from DEDL HDA, let’s specify what data we want to obtain. We will define 3 variables:","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"wTUo8bSmGF"}],"key":"oLG5M81Soy"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":3,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Start date and end date,","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"yKVvlj9z2g"}],"key":"bbVaciv8Ww"},{"type":"listItem","spread":true,"position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"Output directory,","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"LWrIKP16KJ"}],"key":"tcpRp6bJf2"},{"type":"listItem","spread":true,"position":{"start":{"line":5,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Geometry of interesting us area","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"Cj5zsOYxhG"}],"key":"KMQNngGZJG"}],"key":"qQZiFpKjcY"},{"type":"paragraph","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"inlineCode","value":"Start date and end date","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"ho5Ig4sG6b"},{"type":"text","value":" will define our timerange in reuqest. HDA will search only for products that were obtained between those two dates.","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"b2qnvKUdrd"}],"key":"XgXsW1lRvM"},{"type":"paragraph","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"inlineCode","value":"Output directory","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"EdTgyLEayM"},{"type":"text","value":" will define directory for downloaded products.","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"XFoA5QjF1y"}],"key":"qEAjCivozD"},{"type":"paragraph","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"inlineCode","value":"Geometry","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"HGX962U6Bz"},{"type":"text","value":" wll define our area of interest. It will be passed as BBOX (Bounding Box), as a list of coordinates - Xmin, Ymin, Xmax, Ymax. All coordinates will be defined in EPSG:4326.","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"TAxFhrmJ5H"}],"key":"iwKcdYWV0E"}],"key":"PVF6JvL0Ri"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Timerange of data that we want to recieve\nstart_date = '2023-07-01'\nend_date = '2023-07-07'\n# Output directory of our desired data\noutput_dir = 'output/'\n# Geometry in form of a BBOX\nbbox = [21.61868,53.66627,21.90926,53.82351]","key":"iFWTowb1en"},{"type":"output","id":"Mc3sJ7zv1EQaEM4Da5wU3","data":[],"key":"RDJq8gynDd"}],"key":"yx6058C8bA"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":1,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"2. Work with HDA","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"HTDSqkpJhu"}],"identifier":"id-2-work-with-hda","label":"2. Work with HDA","html_id":"id-2-work-with-hda","implicit":true,"key":"T0pWkFLi7y"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"HDA (Harmonized Data Access) uses STAC protocol, that allows its user access the Earth Observation data, stored in various provides. Thanks to that, HDA serves as an one stream of data, allowing for comfortable work with sattelite imagery.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"VFD2B0ZEPA"}],"key":"Aan97IR9KW"}],"key":"MtTZ493MpW"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":1,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"2.1 API URLs","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"EPMP73zLX7"}],"identifier":"id-2-1-api-urls","label":"2.1 API URLs","html_id":"id-2-1-api-urls","implicit":true,"key":"Py3zG8fQtW"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"HDA, as all API, is build upon many endpoints. In this notebook we will use only one for collections and searching. Below there are definitions of those endpoints. We will be using the common one site, but you can change it to ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"l1XjiMZ2Wr"},{"type":"inlineCode","value":"central","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"r56FfIVdmY"},{"type":"text","value":", ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"dKj4tr62Ki"},{"type":"inlineCode","value":"lumi","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"PfqMNvVaQG"},{"type":"text","value":" or ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"xfJZXNdqeY"},{"type":"inlineCode","value":"leonardo","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"HK8ATZb3rj"},{"type":"text","value":" if you want.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"D0JkshN8I7"}],"key":"w2oZYlc6nN"}],"key":"cOnCe0UFXe"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"COLLECTIONS_URL = 'https://hda.data.destination-earth.eu/stac/collections'\nSEARCH_URL = 'https://hda.data.destination-earth.eu/stac/search'","key":"deoQP6YhCw"},{"type":"output","id":"Uvoz7n4yGMEGuFRAWq8Yk","data":[],"key":"A8lqpasgzS"}],"key":"oCN1DYktga"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":1,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"2.2 Listing available collections","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"eq8GN2KnSP"}],"identifier":"id-2-2-listing-available-collections","label":"2.2 Listing available collections","html_id":"id-2-2-listing-available-collections","implicit":true,"key":"hT0Kxvp6Sj"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Firstly lets see to which collections we can get access, while using HDA.","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"RjLFEQOXMu"}],"key":"qJ5ra9ienL"}],"key":"hPO7egBf3V"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def get_stac_collections(api_url):\n    response = requests.get(api_url)\n    if response.status_code == 200:\n        stac_data = response.json()['collections']\n        collections = [x['id'] for x in stac_data]\n        return collections\n    else:\n        print(f\"Error: {response.status_code} - {response.text}\")\n        return None\n    \nget_stac_collections(COLLECTIONS_URL)","key":"zBcnxVIecx"},{"type":"output","id":"GU0uJHzSeoBx5k6etSLgZ","data":[{"output_type":"execute_result","execution_count":9,"metadata":{},"data":{"text/plain":{"content":"['EO.CLMS.DAT.CORINE',\n 'EO.CLMS.DAT.GLO.DMP300_V1',\n 'EO.CLMS.DAT.GLO.FAPAR300_V1',\n 'EO.CLMS.DAT.GLO.FCOVER300_V1',\n 'EO.CLMS.DAT.GLO.GDMP300_V1',\n 'EO.CLMS.DAT.GLO.LAI300_V1',\n 'EO.CLMS.DAT.GLO.NDVI300_V1',\n 'EO.CLMS.DAT.GLO.NDVI_1KM_V2',\n 'EO.CLMS.DAT.SENTINEL-2.HRVPP.VI',\n 'EO.DEM.DAT.COP-DEM_GLO-30-DGED',\n 'EO.DEM.DAT.COP-DEM_GLO-30-DTED',\n 'EO.DEM.DAT.COP-DEM_GLO-90-DGED',\n 'EO.DEM.DAT.COP-DEM_GLO-90-DTED',\n 'EO.ECMWF.DAT.CAMS_EUROPE_AIR_QUALITY_FORECASTS',\n 'EO.ECMWF.DAT.CAMS_EUROPE_AIR_QUALITY_REANALYSES',\n 'EO.ECMWF.DAT.CAMS_GLOBAL_ATMOSHERIC_COMPO_FORECAST',\n 'EO.ECMWF.DAT.CAMS_GLOBAL_EMISSION_INVENTORIES',\n 'EO.ECMWF.DAT.CAMS_GLOBAL_FIRE_EMISSIONS_GFAS',\n 'EO.ECMWF.DAT.CAMS_GLOBAL_GREENHOUSE_GAS_REANALYSIS',\n 'EO.ECMWF.DAT.CAMS_GLOBAL_GREENHOUSE_GAS_REANALYSIS_MONTHLY_AV_FIELDS',\n 'EO.ECMWF.DAT.CAMS_GLOBAL_RADIATIVE_FORCING',\n 'EO.ECMWF.DAT.CAMS_GLOBAL_RADIATIVE_FORCING_AUX',\n 'EO.ECMWF.DAT.CAMS_GLOBAL_REANALYSIS_EAC4',\n 'EO.ECMWF.DAT.CAMS_GLOBAL_REANALYSIS_EAC4_MONTHLY_AV_FIELDS',\n 'EO.ECMWF.DAT.CAMS_GREENHOUSE_GAS_FLUXES',\n 'EO.ECMWF.DAT.CAMS_SOLAR_RADIATION_TIMESERIES',\n 'EO.ECMWF.DAT.CEMS_FIRE_HISTORICAL',\n 'EO.ECMWF.DAT.CEMS_GLOFAS_FORECAST',\n 'EO.ECMWF.DAT.CEMS_GLOFAS_HISTORICAL',\n 'EO.ECMWF.DAT.CEMS_GLOFAS_REFORECAST',\n 'EO.ECMWF.DAT.CEMS_GLOFAS_SEASONAL',\n 'EO.ECMWF.DAT.CEMS_GLOFAS_SEASONAL_REFORECAST',\n 'EO.ECMWF.DAT.CO2_DATA_FROM_SATELLITE_SENSORS_2002_PRESENT',\n 'EO.ECMWF.DAT.DERIVED_GRIDDED_GLACIER_MASS_CHANGE',\n 'EO.ECMWF.DAT.DT_CLIMATE_ADAPTATION',\n 'EO.ECMWF.DAT.DT_EXTREMES',\n 'EO.ECMWF.DAT.EFAS_FORECAST',\n 'EO.ECMWF.DAT.EFAS_HISTORICAL',\n 'EO.ECMWF.DAT.EFAS_REFORECAST',\n 'EO.ECMWF.DAT.EFAS_SEASONAL',\n 'EO.ECMWF.DAT.EFAS_SEASONAL_REFORECAST',\n 'EO.ECMWF.DAT.ERA5_HOURLY_VARIABLES_ON_PRESSURE_LEVELS',\n 'EO.ECMWF.DAT.ERA5_LAND_HOURLY',\n 'EO.ECMWF.DAT.ERA5_LAND_MONTHLY',\n 'EO.ECMWF.DAT.ERA5_MONTHLY_MEANS_VARIABLES_ON_PRESSURE_LEVELS',\n 'EO.ECMWF.DAT.GLACIERS_DISTRIBUTION_DATA_FROM_RANDOLPH_GLACIER_INVENTORY_2000',\n 'EO.ECMWF.DAT.METHANE_DATA_SATELLITE_SENSORS_2002_PRESENT',\n 'EO.ECMWF.DAT.REANALYSIS_ERA5_SINGLE_LEVELS',\n 'EO.ECMWF.DAT.REANALYSIS_ERA5_SINGLE_LEVELS_MONTHLY_MEANS',\n 'EO.ECMWF.DAT.REANALYSIS_UERRA_EUROPE_SINGLE_LEVELS',\n 'EO.ECMWF.DAT.SATELLITE_SEA_ICE_CONCENTRATION',\n 'EO.ECMWF.DAT.SATELLITE_SEA_ICE_EDGE_TYPE',\n 'EO.ECMWF.DAT.SATELLITE_SEA_ICE_THICKNESS',\n 'EO.ECMWF.DAT.SEASONAL_FORECAST_ANOMALIES_ON_PRESSURE_LEVELS_2017_PRESENT',\n 'EO.ECMWF.DAT.SEASONAL_FORECAST_ANOMALIES_ON_SINGLE_LEVELS_2017_PRESENT',\n 'EO.ECMWF.DAT.SEASONAL_FORECAST_DAILY_DATA_ON_PRESSURE_LEVELS_2017_PRESENT',\n 'EO.ECMWF.DAT.SEASONAL_FORECAST_DAILY_DATA_ON_SINGLE_LEVELS_2017_PRESENT',\n 'EO.ECMWF.DAT.SEASONAL_FORECAST_MONTHLY_STATISTICS_ON_PRESSURE_LEVELS_2017_PRESENT',\n 'EO.ECMWF.DAT.SEASONAL_FORECAST_MONTHLY_STATISTICS_ON_SINGLE_LEVELS_2017_PRESENT',\n 'EO.ECMWF.DAT.SEA_LEVEL_DAILY_GRIDDED_DATA_FOR_GLOBAL_OCEAN_1993_PRESENT',\n 'EO.ECMWF.DAT.SIS_HYDROLOGY_METEOROLOGY_DERIVED_PROJECTIONS',\n 'EO.ESA.DAT.SENTINEL-1.L1_GRD',\n 'EO.ESA.DAT.SENTINEL-1.L1_SLC',\n 'EO.ESA.DAT.SENTINEL-2.MSI.L1C',\n 'EO.ESA.DAT.SENTINEL-2.MSI.L2A',\n 'EO.ESA.DAT.SENTINEL-3.OL_2_LFR___',\n 'EO.ESA.DAT.SENTINEL-3.OL_2_LRR___',\n 'EO.ESA.DAT.SENTINEL-3.SL_2_LST___',\n 'EO.ESA.DAT.SENTINEL-3.SR_2_LAN___',\n 'EO.ESA.DAT.SENTINEL-5P.TROPOMI.L1',\n 'EO.ESA.DAT.SENTINEL-5P.TROPOMI.L2',\n 'EO.EUM.CM.METOP.ASCSZFR02',\n 'EO.EUM.CM.METOP.ASCSZOR02',\n 'EO.EUM.CM.METOP.ASCSZRR02',\n 'EO.EUM.DAT.METOP.AMSUL1',\n 'EO.EUM.DAT.METOP.ASCSZF1B',\n 'EO.EUM.DAT.METOP.ASCSZO1B',\n 'EO.EUM.DAT.METOP.ASCSZR1B',\n 'EO.EUM.DAT.METOP.AVHRRGACR02',\n 'EO.EUM.DAT.METOP.AVHRRL1',\n 'EO.EUM.DAT.METOP.GLB-SST-NC',\n 'EO.EUM.DAT.METOP.GOMEL1',\n 'EO.EUM.DAT.METOP.GOMEL1R03',\n 'EO.EUM.DAT.METOP.IASIL1C-ALL',\n 'EO.EUM.DAT.METOP.IASSND02',\n 'EO.EUM.DAT.METOP.IASTHR011',\n 'EO.EUM.DAT.METOP.LSA-002',\n 'EO.EUM.DAT.METOP.MHSL1',\n 'EO.EUM.DAT.METOP.OSI-104',\n 'EO.EUM.DAT.METOP.OSI-150-A',\n 'EO.EUM.DAT.METOP.OSI-150-B',\n 'EO.EUM.DAT.METOP.SOMO12',\n 'EO.EUM.DAT.METOP.SOMO25',\n 'EO.EUM.DAT.MULT.HIRSL1',\n 'EO.EUM.DAT.SENTINEL-3.AOD',\n 'EO.EUM.DAT.SENTINEL-3.FRP',\n 'EO.EUM.DAT.SENTINEL-3.OL_1_EFR___',\n 'EO.EUM.DAT.SENTINEL-3.OL_1_ERR___',\n 'EO.EUM.DAT.SENTINEL-3.OL_2_WFR___',\n 'EO.EUM.DAT.SENTINEL-3.OL_2_WRR___',\n 'EO.EUM.DAT.SENTINEL-3.SL_1_RBT___',\n 'EO.EUM.DAT.SENTINEL-3.SL_2_WST___',\n 'EO.EUM.DAT.SENTINEL-3.SR_1_SRA_A_',\n 'EO.EUM.DAT.SENTINEL-3.SR_1_SRA_BS',\n 'EO.EUM.DAT.SENTINEL-3.SR_1_SRA___',\n 'EO.EUM.DAT.SENTINEL-3.SR_2_WAT___',\n 'EO.GSW.DAT.CHANGE',\n 'EO.GSW.DAT.EXTENT',\n 'EO.GSW.DAT.OCCURRENCE',\n 'EO.GSW.DAT.RECURRENCE',\n 'EO.GSW.DAT.SEASONALITY',\n 'EO.GSW.DAT.TRANSITIONS',\n 'EO.MO.DAT.GLOBAL_ANALYSISFORECAST_BGC_001_028',\n 'EO.MO.DAT.GLOBAL_ANALYSISFORECAST_PHY_001_024',\n 'EO.MO.DAT.GLOBAL_ANALYSISFORECAST_WAV_001_027',\n 'EO.MO.DAT.GLOBAL_MULTIYEAR_BGC_001_033',\n 'EO.MO.DAT.GLOBAL_MULTIYEAR_PHY_ENS_001_031',\n 'EO.MO.DAT.GLOBAL_MULTIYEAR_WAV_001_032',\n 'EO.MO.DAT.INSITU_GLO_PHY_TS_OA_MY_013_052',\n 'EO.MO.DAT.INSITU_GLO_PHY_TS_OA_NRT_013_002',\n 'EO.MO.DAT.INSITU_GLO_PHY_UV_DISCRETE_NRT_013_048',\n 'EO.MO.DAT.MULTIOBS_GLO_BGC_NUTRIENTS_CARBON_PROFILES_MYNRT_015_009',\n 'EO.MO.DAT.MULTIOBS_GLO_BIO_BGC_3D_REP_015_010',\n 'EO.MO.DAT.MULTIOBS_GLO_BIO_CARBON_SURFACE_REP_015_008',\n 'EO.MO.DAT.MULTIOBS_GLO_PHY_MYNRT_015_003',\n 'EO.MO.DAT.MULTIOBS_GLO_PHY_S_SURFACE_MYNRT_015_013',\n 'EO.MO.DAT.MULTIOBS_GLO_PHY_TSUV_3D_MYNRT_015_012',\n 'EO.MO.DAT.MULTIOBS_GLO_PHY_W_3D_REP_015_007',\n 'EO.MO.DAT.OCEANCOLOUR_GLO_BGC_L3_MY_009_103',\n 'EO.MO.DAT.OCEANCOLOUR_GLO_BGC_L3_MY_009_107',\n 'EO.MO.DAT.OCEANCOLOUR_GLO_BGC_L3_NRT_009_101',\n 'EO.MO.DAT.OCEANCOLOUR_GLO_BGC_L4_MY_009_104',\n 'EO.MO.DAT.OCEANCOLOUR_GLO_BGC_L4_MY_009_108',\n 'EO.MO.DAT.OCEANCOLOUR_GLO_BGC_L4_NRT_009_102',\n 'EO.MO.DAT.SEAICE_GLO_SEAICE_L4_NRT_OBSERVATIONS_011_001',\n 'EO.MO.DAT.SEAICE_GLO_SEAICE_L4_NRT_OBSERVATIONS_011_006',\n 'EO.MO.DAT.SEAICE_GLO_SEAICE_L4_REP_OBSERVATIONS_011_009',\n 'EO.MO.DAT.SEALEVEL_GLO_PHY_L4_NRT_008_046',\n 'EO.MO.DAT.SEALEVEL_GLO_PHY_MDT_008_063',\n 'EO.MO.DAT.SST_GLO_SST_L3S_NRT_OBSERVATIONS_010_010',\n 'EO.MO.DAT.SST_GLO_SST_L4_NRT_OBSERVATIONS_010_001',\n 'EO.MO.DAT.SST_GLO_SST_L4_REP_OBSERVATIONS_010_011',\n 'EO.MO.DAT.SST_GLO_SST_L4_REP_OBSERVATIONS_010_024',\n 'EO.MO.DAT.WAVE_GLO_PHY_SWH_L3_NRT_014_001',\n 'EO.MO.DAT.WAVE_GLO_PHY_SWH_L4_NRT_014_003',\n 'EO.MO.DAT.WAVE_GLO_WAV_L3_SPC_NRT_OBSERVATIONS_014_002',\n 'EO.MO.DAT.WIND_GLO_PHY_CLIMATE_L4_MY_012_003',\n 'EO.MO.DAT.WIND_GLO_PHY_L3_MY_012_005',\n 'EO.MO.DAT.WIND_GLO_PHY_L3_NRT_012_002',\n 'EO.MO.DAT.WIND_GLO_PHY_L4_MY_012_006',\n 'EO.MO.DAT.WIND_GLO_PHY_L4_NRT_012_004',\n 'EO.NASA.DAT.LANDSAT.C2_L1',\n 'EO.NASA.DAT.LANDSAT.C2_L2',\n 'STAT.EUSTAT.DAT.GREENHOUSE_GAS_EMISSION_AGRICULTURE',\n 'STAT.EUSTAT.DAT.POP_AGE_GROUP_SEX_NUTS3',\n 'STAT.EUSTAT.DAT.POP_AGE_SEX_NUTS2',\n 'STAT.EUSTAT.DAT.POP_CHANGE_DEMO_BALANCE_CRUDE_RATES_NUTS3',\n 'STAT.EUSTAT.DAT.SHARE_ENERGY_FROM_RENEWABLE']","content_type":"text/plain"}}}],"key":"xTAVheiqwg"}],"key":"weKRoWCHpb"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"As you can see, there are many dataset, that can be access using just one single tool - HDA. In this notebook we will use only Sentinel-2 images, so our collections will be ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"EH2Hd3tYDR"},{"type":"inlineCode","value":"EO.ESA.DAT.SENTINEL-2.MSI.L1C","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"PtovyDuIAj"},{"type":"text","value":" and ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"GtmvvkZSOS"},{"type":"inlineCode","value":"EO.ESA.DAT.SENTINEL-2.MSI.L2A","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"KyiiMowzdD"},{"type":"text","value":".","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"W3lOdSBieJ"}],"key":"TmqAmFC4O1"}],"key":"QB9lNQgG5a"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"collections = ['EO.ESA.DAT.SENTINEL-2.MSI.L1C', 'EO.ESA.DAT.SENTINEL-2.MSI.L2A']","key":"ziwTTdgEsK"},{"type":"output","id":"wN4eyD11bY5XULH1EQDAA","data":[],"key":"yggj3D9paS"}],"key":"fnkpkZKAww"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"2.3 Authorization","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"va3LjUkmS3"}],"identifier":"id-2-3-authorization","label":"2.3 Authorization","html_id":"id-2-3-authorization","implicit":true,"key":"phSpXU7mo2"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"As stated before, to use HDA you will need an account on DestinE. Using your credentials, you will be able to generate ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"MNG52bnp1Z"},{"type":"inlineCode","value":"access token","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"M1oBQYtX46"},{"type":"text","value":", that will be needed in upcoming requests. In listing collections’ cell you didn’t have to create token, because only more advanced requests (like listing, searching and downloading items) need it.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"qdxNzt2O2w"}],"key":"sXXO6DBpG9"}],"key":"lwZqzhuK0A"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"DESP_USERNAME = input(\"Please input your DESP username or email: \")\nDESP_PASSWORD = getpass(\"Please input your DESP password: \")\n\nauth = deauth.AuthHandler(DESP_USERNAME, DESP_PASSWORD)\naccess_token = auth.get_token()\nif access_token is not None:\n    print(\"DEDL/DESP Access Token Obtained Successfully\")\nelse:\n    print(\"Failed to Obtain DEDL/DESP Access Token\")\n\nauth_headers = {\"Authorization\": f\"Bearer {access_token}\"}","key":"UEZnxgKcJk"},{"type":"output","id":"RSzU_RQ_fLlfIp7q_zntF","data":[{"name":"stdout","output_type":"stream","text":"Response code: 200\nDEDL/DESP Access Token Obtained Successfully\n"}],"key":"Mz5uiRCxM3"}],"key":"BDfXeA5q8y"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"2.4 Find newest product","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"DYtMdSqSlK"}],"identifier":"id-2-4-find-newest-product","label":"2.4 Find newest product","html_id":"id-2-4-find-newest-product","implicit":true,"key":"t29wArhmgH"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"After defining all prerequired data and obtaining access token, we can start searching for interesting us products. To do that, we will firstly create body of a POST request with ours parameters. Then, we will send it to HDA and, if request is successful, we will read from response download link.","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"R3P5cEgpME"}],"key":"gmPlNxwtEz"}],"key":"dMqcW76iOS"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def search_items(access_token: str, search_url: str, collection: str, \n                 bbox: list[float | int], start_date: str, end_date: str):\n    body = {\n        'datetime': f'{start_date}T00:00:00Z/{end_date}T23:59:59Z',\n        'collections': [collection],\n        'bbox': bbox\n    }\n    response = requests.post(search_url, json=body, headers={'Authorization': 'Bearer {}'.format(access_token)})\n    if response.status_code != 200:\n        print(f'Error in search request: {response.status_code} - {response.text}')\n        return None\n    else:\n        print(\"Request successful! Reading data...\")\n        products_list = [(feature.get('assets').get('downloadLink').get('href'), feature.get('links')[0].get('title')) for feature in response.json().get('features', [])]\n        return products_list","key":"vwwjVIeHJw"},{"type":"output","id":"3F2_NnypByz2WadYXTtLR","data":[],"key":"qjW3PxxWre"}],"key":"QftN35iTTX"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"To obtain products from two levels of Sentinel-2 - L2A and L1C, we will use loop, iterating over every single collection.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"c50ChYTPMG"}],"key":"mNA1ZLKXkG"}],"key":"iq4IZrmtNz"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"collections_items = []\nfor c in collections:\n    collections_items.append(search_items(access_token, SEARCH_URL, c, bbox, start_date, end_date))","key":"BoreZ3vXrb"},{"type":"output","id":"8b8eEo9-Jur9mmhLUs60i","data":[{"name":"stdout","output_type":"stream","text":"Request successful! Reading data...\nRequest successful! Reading data...\n"}],"key":"WYrJrBhumL"}],"key":"cLUJssC4bD"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"2.5 Download founded images","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Nv0Krj0EiZ"}],"identifier":"id-2-5-download-founded-images","label":"2.5 Download founded images","html_id":"id-2-5-download-founded-images","implicit":true,"key":"pS1VKEVEE7"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"After obtaining download links for each of interesting us product, we can finally download it. With single request, we will download compressed product in zip format to provided directory. Function will set filename as product’s id. Mind that Sentinel-2 products might be over 1 GB, so it may take a few minutes to download them, based on your internet connection.","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"KUOn0uJ9lX"}],"key":"xb3xpQA84x"}],"key":"VOFOczL0Y6"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def hda_download(access_token: str, url: str, output: str):\n    response = requests.get(url,stream=True,headers={'Authorization': 'Bearer {}'.format(access_token), 'Accept-Encoding': None})\n    if response.status_code == 200:\n        print('Downloading dataset...')\n        with zipfile.ZipFile(io.BytesIO(response.content)) as z:\n            z.extractall(output)\n        print('The dataset has been downloaded to: {}'.format(output))\n    else:\n        print('Request Unsuccessful! Error-Code: {}'.format(response.status_code))","key":"WUp9oMHm9b"},{"type":"output","id":"d54HSJgTm-huXqVoAJw8c","data":[],"key":"s6u0Q7IV4Q"}],"key":"GxL8uiQvDZ"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"From previous section, we obtained 2D list - with one dimension being collection and second being one item (single product). Becouse of that, we will use two loops to iterate over single products.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"NW2hJquvsa"}],"key":"XZvL4EqqBf"}],"key":"sQcCAS2Uyx"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"for collection in collections_items:\n    for item in collection:\n        url = item[0]\n        product_id = item[1]\n        download_path = output_dir + product_id\n        hda_download(access_token, url, download_path)\n        break","key":"uQtMU0dSud"},{"type":"output","id":"Mne3qYPZZco3gaj3p4G5g","data":[{"name":"stdout","output_type":"stream","text":"Downloading dataset...\nThe dataset has been downloaded to: output/S2B_MSIL1C_20230701T094549_N0509_R079_T34UEE_20230701T104205\nDownloading dataset...\nThe dataset has been downloaded to: output/S2B_MSIL2A_20230701T094549_N0509_R079_T34UEE_20230701T113400\n"}],"key":"pdeV8qSH6l"}],"key":"u4Zsjf2zJ2"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":1,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"4. Simple data computing - obtaining NDWI","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"JJkVdVEhO7"}],"identifier":"id-4-simple-data-computing-obtaining-ndwi","label":"4. Simple data computing - obtaining NDWI","html_id":"id-4-simple-data-computing-obtaining-ndwi","implicit":true,"key":"aOwkJMI1Ev"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"In this chapter we will conduct simple data computing. As stated before, this notebook concentrate on monitoring of Śniadrwy lake, so we will try to calculate NDWI index for each pixel and create raster from it. Using all downloaded items, we will be able to monitor lake status from entire month.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"MogungVxoV"}],"key":"eakBxpXYWU"}],"key":"gQrrC9ojR5"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"4.1 Libraries","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"qXCviNttNI"}],"identifier":"id-4-1-libraries","label":"4.1 Libraries","html_id":"id-4-1-libraries","implicit":true,"key":"b0S4uJ8SWm"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"In this chapter we will try to compute obtained by us imagery data, with usage of Python and its spatial-oriented packages.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"zSABQl3Poe"}],"key":"EDFnltnR5L"}],"key":"krBPPfB7ee"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"import rasterio\nfrom osgeo import gdal, gdal_array, osr\nimport numpy as np\nimport os","key":"SMma6fLXg8"},{"type":"output","id":"KoBUyFRWdYHgC9fT3AO7z","data":[],"key":"k46TFb9WNr"}],"key":"sXuvBl9Yk6"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"4.2 Functions for reading, calculating and saving raster data","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"PKLAlailC6"}],"identifier":"id-4-2-functions-for-reading-calculating-and-saving-raster-data","label":"4.2 Functions for reading, calculating and saving raster data","html_id":"id-4-2-functions-for-reading-calculating-and-saving-raster-data","implicit":true,"key":"PqwMw3IlAZ"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Here we present you some functions for reading raster data into Numpy matrix, calculating NDWI with NIR and GREEN matrixes and saving result as a new raster. We will conduct such calculation for each downloaded item. In the end, we will obtain NDWI data on Śniadrwy Lake from whole week.","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"rB8ywJYb1Y"}],"key":"DXhRv2w6ap"}],"key":"xUpv0V1g0I"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def getFullPath(dir: str, resolution: int, band: str):\n    if not os.path.isdir(dir):\n        raise ValueError(f\"Provided path does not exist: {dir}\")\n    elif resolution not in [10,20,60]:\n        raise ValueError(f\"Provided resolution does not exist: R{resolution}m\")\n    else:\n        full_path = dir\n        while True:\n            content = os.listdir(full_path)\n            if len(content) == 0:\n                raise ValueError(f\"Directory empty: {full_path}\")\n            elif len(content) == 1:\n                if full_path[-1] != '/':\n                    full_path = full_path + '/' + content[0]\n                else:\n                    full_path = full_path + content[0]\n            else:\n                if 'GRANULE' in content:\n                    full_path = full_path + '/' + 'GRANULE'\n                    break\n                else:\n                    raise ValueError(f\"Unsupported dir architecture: {full_path}\")\n        full_path = full_path + '/' + os.listdir(full_path)[0]\n        full_path = full_path + '/' + \"IMG_DATA\"\n        if len(os.listdir(full_path)) == 3:\n            full_path = full_path + '/' + f'R{resolution}m'\n            images = os.listdir(full_path)\n            for img in images:\n                if band in img:\n                    return full_path + '/' + img\n            raise ValueError(f'No such band {band} in directory: {full_path}')\n        else:\n            images = os.listdir(full_path)\n            for img in images:\n                if band in img:\n                    return full_path + '/' + img\n            raise ValueError(f'No such band {band} in directory: {full_path}')\n\n# Get transformation matrix from raster\ndef getTransform(pathToRaster):\n    dataset = gdal.Open(pathToRaster)\n    transformation = dataset.GetGeoTransform()\n    return transformation\n\n# Read raster and return pixels' values matrix as int16, new transformation matrix, crs\ndef readRaster(path, resolution, band):\n    path = getFullPath(path, resolution, band)\n    trans = getTransform(path) # trzeba zdefiniować który kanał\n    raster, crs = rasterToMatrix(path)\n    return raster.astype(np.int16), crs, trans\n\ndef rasterToMatrix(pathToRaster):\n    with rasterio.open(pathToRaster) as src:\n        matrix = src.read(1)\n    return matrix, src.crs.to_epsg()\n\n# Transform numpy's matrix to geotiff; pass new raster's filepath, matrix with pixels' values, gdal file type, transformation matrix, projection, nodata value\ndef npMatrixToGeotiff(filepath, matrix, gdalType, projection, transformMatrix, nodata = None):\n    driver = gdal.GetDriverByName('Gtiff')\n    if len(matrix.shape) > 2:\n        (bandNr, yRes, xRes) = matrix.shape\n        image = driver.Create(filepath, xRes, yRes, bandNr, gdalType)\n        for b in range(bandNr):\n            b = b + 1\n            band = image.GetRasterBand(b)\n            if nodata is not None:\n                band.SetNoDataValue(nodata)\n            band.WriteArray(matrix[b-1,:,:])\n            band.FlushCache\n    else:\n        bandNr = 1\n        (yRes, xRes) = matrix.shape\n        image = driver.Create(filepath, xRes, yRes, bandNr, gdalType)\n        print(type(image))\n        band = image.GetRasterBand(bandNr)\n        if nodata is not None:\n            band.SetNoDataValue(nodata)\n        band.WriteArray(matrix)\n        band.FlushCache\n    image.SetGeoTransform(transformMatrix)\n    image.SetProjection(projection)\n    del driver, image, band","key":"fzz46DOlnV"},{"type":"output","id":"a-tqDGpdofh1bG34GQPJX","data":[],"key":"lIYDMv5OoV"}],"key":"CyTIZ9WEQk"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"4.3 Computing","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"b908XH8vUc"}],"identifier":"id-4-3-computing","label":"4.3 Computing","html_id":"id-4-3-computing","implicit":true,"key":"GiHvVPu3Kq"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"With usage of defined functions, we will now generate NWDI rasters. Only data that will be needed in this step is a list with paths to our products (extracted from zip archive). Function ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"AYd29UdJlJ"},{"type":"inlineCode","value":"readRaster","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"p8WQcjtbR7"},{"type":"text","value":" will choose specified band from specified path.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"FYAYzmH2eO"}],"key":"ygZOjllDPB"}],"key":"IMWlnJaVI7"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# List of products' paths. If your output directory contains more than just downloaded products, please provide them in a list, just like in the commented lines below\n#dataset = [output_dir+x for x in os.listdir(output_dir)]\ndataset = [\n     'output/S2B_MSIL1C_20230701T094549_N0509_R079_T34UEE_20230701T104205'\n ]\n# Output directiry for new images\ncompution_output = 'output/ndwi_rasters'\n\n# Iterating over single product\nfor item in dataset:\n    # Reading name from path\n    name = item.split('/')[-1]\n    # Reading green band into matrix\n    green = readRaster(item, 10, 'B03')\n    # Reading NIR band into matrix\n    nir = readRaster(item, 10, 'B08')\n    # Calculating NDWI matrix\n    ndwi = (green[0]-nir[0]) / (green[0]+nir[0])\n    # Setting treshhold for water-containing pixels\n    ndwi[ndwi >= 0] = 1\n    ndwi[ndwi < 0] = 0\n    # Creating SpatialReference object and setting it to match original's raster CRS\n    projection = osr.SpatialReference()\n    projection.ImportFromEPSG(green[1])\n    # Creating raster from matrix in GeoTiff format\n    npMatrixToGeotiff(f'{compution_output}/{name}.tif', ndwi, gdal_array.NumericTypeCodeToGDALTypeCode(np.float32), projection.ExportToWkt(), green[2])","key":"ZjJqgAwBVL"},{"type":"output","id":"0JD5KGUftYXs0Tl8CXLqr","data":[{"name":"stderr","output_type":"stream","text":"/tmp/ipykernel_14887/1055239620.py:18: RuntimeWarning: invalid value encountered in divide\n  ndwi = (green[0]-nir[0]) / (green[0]+nir[0])\n"},{"name":"stdout","output_type":"stream","text":"<class 'osgeo.gdal.Dataset'>\n"}],"key":"NvP6az7SW3"}],"key":"jhgZDMmvbx"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"After successfuly creating and saving new images, we can now visualize them in Python using raterio package.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"dJYuz5Zcwc"}],"key":"kMIctVAiOo"}],"key":"wJu8JImZZb"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"img = rasterio.open('output/ndwi_rasters/S2B_MSIL1C_20230701T094549_N0509_R079_T34UEE_20230701T104205.tif')\nfrom rasterio.plot import show\nshow(img)","key":"anwWq5TD0k"},{"type":"output","id":"qdqWrnoslLIbQE6eU6bIR","data":[{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"e22a918acd9ca9a355be23b1af5f5b37","path":"/e22a918acd9ca9a355be23b1af5f5b37.png"},"text/plain":{"content":"<Figure size 640x480 with 1 Axes>","content_type":"text/plain"}}},{"output_type":"execute_result","execution_count":40,"metadata":{},"data":{"text/plain":{"content":"<Axes: >","content_type":"text/plain"}}}],"key":"WUOlET5VfZ"}],"key":"qbC1dCNwf6"}],"key":"aPalt6ejOU"},"references":{"cite":{"order":[],"data":{}}}}