{"version":2,"kind":"Notebook","sha256":"7272fbb5c2bf918e0c79b873014e2dc8c4d2e187b0c7f11bd8a60da217cbeecb","slug":"dedl-hook-access","location":"/HOOK/DEDL-Hook_access.ipynb","dependencies":[],"frontmatter":{"title":"Access to Hook services","content_includes_title":false,"kernelspec":{"name":"python3","display_name":"Python 3 (ipykernel)","language":"python"},"numbering":{"title":{"offset":2}},"exports":[{"format":"ipynb","filename":"DEDL-Hook_access.ipynb","url":"/build/DEDL-Hook_access-0563983e9bea149b9645588d5a93bafa.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"strong","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Licence","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"ds9UYQ7dmX"}],"key":"HTJ8CtmG3n"},{"type":"text","value":": MIT ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"NxT5VLaJYc"},{"type":"break","key":"X1r2QUnooN"}],"key":"r0Cp3POuUV"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"This Notebook demonstrates:","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"znXUWq5mZG"}],"key":"Y6g46mRO25"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":6,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Retrieval of a token appropriate for interaction with the OnDemand Processing API (Hook API)","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"CUM05ucvCV"}],"key":"PftbvYtWWM"},{"type":"listItem","spread":true,"position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Listing of available Hooks (Processors) using the retrieved token","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"dm5Dn6NsLh"}],"key":"GRpfnZdsYm"}],"key":"VEbxdJnbeu"}],"key":"UXFModjvqT"},{"type":"block","kind":"notebook-code","data":{"collapsed":true,"jupyter":{"outputs_hidden":true},"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"%pip install pycurl\n\nimport json\nfrom io import BytesIO\nfrom urllib.parse import urlencode\nimport getpass\nimport pycurl\nimport requests\nfrom getpass import getpass\nfrom IPython.display import JSON","visibility":"show","key":"y1MpG9xDYr"},{"type":"output","id":"NWO_ZYVuMk0ds74DqMf-0","data":[],"visibility":"show","key":"ytkzgDgfbR"}],"visibility":"show","key":"UaqIfT2FYz"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Autehentication - function","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"BwrxRNhHvG"}],"identifier":"autehentication-function","label":"Autehentication - function","html_id":"autehentication-function","implicit":true,"key":"DxlJ4sgmHb"}],"key":"Zk2Xw8Rx4J"},{"type":"block","kind":"notebook-code","data":{"collapsed":true,"jupyter":{"outputs_hidden":true},"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"import requests\nfrom lxml import html\nfrom urllib.parse import parse_qs, urlparse\n\nIAM_URL = \"https://auth.destine.eu/\"\nCLIENT_ID = \"dedl-hook\"\nREALM = \"desp\"\nSERVICE_URL = \"https://odp.data.destination-earth.eu/odata/v1/\"\n\n\nclass DESPAuth:\n    def __init__(self, username, password):\n        self.username = username\n        self.password = password\n\n    def get_token(self):\n        with requests.Session() as s:\n\n            # Get the auth url\n            auth_url = (\n                html.fromstring(\n                    s.get(\n                        url=IAM_URL\n                        + \"/realms/\"\n                        + REALM\n                        + \"/protocol/openid-connect/auth\",\n                        params={\n                            \"client_id\": CLIENT_ID,\n                            \"redirect_uri\": SERVICE_URL,\n                            \"scope\": \"openid\",\n                            \"response_type\": \"code\",\n                        },\n                    ).content.decode()\n                )\n                .forms[0]\n                .action\n            )\n\n            # Login and get auth code\n            login = s.post(\n                auth_url,\n                data={\n                    \"username\": self.username,\n                    \"password\": self.password,\n                },\n                allow_redirects=False,\n            )\n\n            # We expect a 302, a 200 means we got sent back to the login page and there's probably an error message\n            if login.status_code == 200:\n                tree = html.fromstring(login.content)\n                error_message_element = tree.xpath('//span[@id=\"input-error\"]/text()')\n                error_message = (\n                    error_message_element[0].strip()\n                    if error_message_element\n                    else \"Error message not found\"\n                )\n                raise Exception(error_message)\n\n            if login.status_code != 302:\n                raise Exception(\"Login failed\")\n\n            auth_code = parse_qs(urlparse(login.headers[\"Location\"]).query)[\"code\"][0]\n\n            # Use the auth code to get the token\n            response = requests.post(\n                IAM_URL + \"/realms/\" + REALM + \"/protocol/openid-connect/token\",\n                data={\n                    \"client_id\": CLIENT_ID,\n                    \"redirect_uri\": SERVICE_URL,\n                    \"code\": auth_code,\n                    \"grant_type\": \"authorization_code\",\n                    \"scope\": \"\",\n                },\n            )\n\n            if response.status_code != 200:\n                raise Exception(\"Failed to get token\")\n\n            token = response.json()[\"access_token\"]\n\n            return token\n\n\nclass DEDLAuth:\n    def __init__(self, desp_access_token):\n        self.desp_access_token = desp_access_token\n\n    def get_token(self):\n        DEDL_TOKEN_URL = \"https://identity.data.destination-earth.eu/auth/realms/dedl/protocol/openid-connect/token\"\n        DEDL_CLIENT_ID = \"hda-public\"\n        AUDIENCE = \"hda-public\"\n\n        data = {\n            \"grant_type\": \"urn:ietf:params:oauth:grant-type:token-exchange\",\n            \"subject_token\": self.desp_access_token,\n            \"subject_issuer\": \"desp-oidc\",\n            \"subject_token_type\": \"urn:ietf:params:oauth:token-type:access_token\",\n            \"client_id\": DEDL_CLIENT_ID,\n            \"audience\": AUDIENCE,\n        }\n\n        response = requests.post(DEDL_TOKEN_URL, data=data)\n\n        print(\"Response code:\", response.status_code)\n\n        if response.status_code == 200:\n            dedl_token = response.json()[\"access_token\"]\n            return dedl_token\n        else:\n            print(response.json())\n            print(\"Error obtaining DEDL access token\")\n\n\nclass AuthHandler:\n    def __init__(self, username, password):\n        self.username = username\n        self.password = password\n        self.desp_access_token = None\n        self.dedl_access_token = None\n\n    def get_token(self):\n        # Get DESP auth token\n        desp_auth = DESPAuth(self.username, self.password)\n        self.desp_access_token = desp_auth.get_token()\n\n        # Get DEDL auth token\n        dedl_auth = DEDLAuth(self.desp_access_token)\n        self.dedl_access_token = dedl_auth.get_token()\n\n        return self.dedl_access_token","visibility":"show","key":"NV3G9d2RKC"},{"type":"output","id":"juwpwixxEWtbFFUh9jyn6","data":[],"visibility":"show","key":"xhISAL1ciw"}],"visibility":"show","key":"OC49b3F0RX"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Authetication","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"ytNesWXOgb"}],"identifier":"authetication","label":"Authetication","html_id":"authetication","implicit":true,"key":"EaFN47Ut6T"}],"key":"otyT4GRzaJ"},{"type":"block","kind":"notebook-code","data":{"collapsed":true,"jupyter":{"outputs_hidden":true},"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"# Enter DESP credentials.\nDESP_USERNAME = input(\"Please input your DESP username or email: \")\nDESP_PASSWORD = getpass(\"Please input your DESP password: \")\n\ntoken = AuthHandler(DESP_USERNAME, DESP_PASSWORD)\naccess_token = token.get_token()\n\n# Check the status of the request\nif access_token is not None:\n\n    print(\"DEDL/DESP Access Token Obtained Successfully\")\n\nelse:\n\n    print(\"Failed to Obtain DEDL/DESP Access Token\")","visibility":"show","key":"RjChhmN2PB"},{"type":"output","id":"F48kgN4FbhMaWFt350oa8","data":[],"visibility":"show","key":"qB1Rihhzt8"}],"visibility":"show","key":"djPrstvmuQ"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Get a list of avilable Hooks","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"AanDPnjrcN"}],"identifier":"get-a-list-of-avilable-hooks","label":"Get a list of avilable Hooks","html_id":"get-a-list-of-avilable-hooks","implicit":true,"key":"gy9E0qGniD"}],"key":"zC7fEo5mN4"},{"type":"block","kind":"notebook-code","data":{"collapsed":true,"jupyter":{"outputs_hidden":true}},"children":[{"type":"code","lang":"python","executable":true,"value":"api_headers = {\"Authorization\": \"Bearer \" + access_token}\nservice_root_url = \"https://odp.data.destination-earth.eu/odata/v1/\"\nresult = requests.get(service_root_url + \"Workflows\", headers=api_headers).json()\n\n# Assuming 'result' is a JSON array\nfor item in result[\"value\"]:\n    for key, value in item.items():\n        print(f\"{key}: {value}\")\n    print()  # Print an empty line to separate each item","key":"WrnEt3VUsP"},{"type":"output","id":"JDUKFO_MT4toTa5HqQ_j7","data":[],"key":"x2K5m7YhnF"}],"key":"TWe19bOcSW"}],"key":"BT5lBYWuzy"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"DEDL - Hook Tutorial - Data Harvest (data-harvest)","url":"/tutorial","group":"HOOK"},"next":{"title":"STACK Service","url":"/readme-2","group":"STACK"}}},"domain":"http://localhost:3001"}